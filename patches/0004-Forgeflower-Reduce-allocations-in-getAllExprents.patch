From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SuperCoder79 <25208576+SuperCoder7979@users.noreply.github.com>
Date: Sun, 21 Nov 2021 17:33:09 -0500
Subject: [PATCH] Forgeflower - Reduce allocations in getAllExprents


diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AnnotationExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AnnotationExprent.java
index c1d755183f276c66f087e86b0cf8b0aa4c198f75..deeffdd983f852bf8e8aa69fd915004740842c90 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AnnotationExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AnnotationExprent.java
@@ -27,6 +27,13 @@ public class AnnotationExprent extends Exprent {
     this.parValues = parValues;
   }
 
+  @Override
+  protected List<Exprent> getAllExprents(List<Exprent> list) {
+    list.addAll(this.parValues);
+
+    return list;
+  }
+
   @Override
   public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) {
     TextBuffer buffer = new TextBuffer();
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ArrayExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ArrayExprent.java
index 753a0a60059ba84b3cb42edf782ab312a18791ca..178bc2b36f0aa91ae6b8e4bdb057f0b521b49cc7 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ArrayExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ArrayExprent.java
@@ -56,8 +56,7 @@ public class ArrayExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     lst.add(array);
     lst.add(index);
     return lst;
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssertExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssertExprent.java
index 0dcb63d34c036a9cd21e21d77c2ea01f6f5b9266..f080fc86aa5735000d591fb27b7bb063e32f1e95 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssertExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssertExprent.java
@@ -17,6 +17,12 @@ public class AssertExprent extends Exprent {
     this.parameters = parameters;
   }
 
+  @Override
+  protected List<Exprent> getAllExprents(List<Exprent> list) {
+    list.addAll(this.parameters);
+    return list;
+  }
+
   @Override
   public TextBuffer toJava(int indent, BytecodeMappingTracer tracer) {
     TextBuffer buffer = new TextBuffer();
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssignmentExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssignmentExprent.java
index c590ac5a15ba65b7dfc90cac27e1b34e5d1ffefd..e6704b3c54a06f54f32a7e66021b1e2b39654123 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssignmentExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/AssignmentExprent.java
@@ -74,8 +74,7 @@ public class AssignmentExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     lst.add(left);
     lst.add(right);
     return lst;
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
index 9fa58125289555ee7a4c565574acf74afcc413d0..78456aa710a32d3329642c262153f60fe263f932 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ConstExprent.java
@@ -96,8 +96,8 @@ public class ConstExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    return new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> list) {
+    return list;
   }
 
   @Override
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExitExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExitExprent.java
index b3cc07de2a2ef613de320e120e2f0957aed4cbbd..0eba85611b4ef3c6f1760fe612a1d4107d5c82b5 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExitExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/ExitExprent.java
@@ -56,8 +56,7 @@ public class ExitExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     if (value != null) {
       lst.add(value);
     }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
index bb303e84f33161a4b4fd40a73aa48d29981d9ef2..98d6766d6ea05204d4188b4c04bf025a3925ffc0 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/Exprent.java
@@ -3,6 +3,7 @@
  */
 package org.jetbrains.java.decompiler.modules.decompiler.exps;
 
+import java.util.ArrayList;
 import org.jetbrains.java.decompiler.main.DecompilerContext;
 import org.jetbrains.java.decompiler.util.TextBuffer;
 import org.jetbrains.java.decompiler.main.collectors.BytecodeMappingTracer;
@@ -21,7 +22,7 @@ import java.util.List;
 import java.util.Map.Entry;
 import java.util.Set;
 
-public class Exprent implements IMatchable {
+public abstract class Exprent implements IMatchable {
   public static final int MULTIPLE_USES = 1;
   public static final int SIDE_EFFECTS_FREE = 2;
   public static final int BOTH_FLAGS = 3;
@@ -79,14 +80,25 @@ public class Exprent implements IMatchable {
     return false;
   }
 
-  public List<Exprent> getAllExprents(boolean recursive) {
-    List<Exprent> lst = getAllExprents();
+  public final List<Exprent> getAllExprents(boolean recursive) {
+    List<Exprent> lst = new ArrayList<>();
+    getAllExprents(recursive, lst);
+
+    return lst;
+  }
+
+  private List<Exprent> getAllExprents(boolean recursive, List<Exprent> list) {
+    int start = list.size();
+    getAllExprents(list);
+    int end = list.size();
+
     if (recursive) {
-      for (int i = lst.size() - 1; i >= 0; i--) {
-        lst.addAll(lst.get(i).getAllExprents(true));
+      for (int i = end - 1; i >= start; i--) {
+        list.get(i).getAllExprents(true, list);
       }
     }
-    return lst;
+
+    return list;
   }
 
   public Set<VarVersionPair> getAllVariables() {
@@ -102,10 +114,17 @@ public class Exprent implements IMatchable {
     return set;
   }
 
-  public List<Exprent> getAllExprents() {
-    throw new RuntimeException("not implemented");
+  public final List<Exprent> getAllExprents() {
+    List<Exprent> list = new ArrayList<>();
+    getAllExprents(list);
+
+    return list;
   }
 
+  // Get all the exprents contained within the current one
+  // Preconditions: this list must never be removed from! Only added to!
+  protected abstract List<Exprent> getAllExprents(List<Exprent> list);
+
   public Exprent copy() {
     throw new RuntimeException("not implemented");
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java
index 0f737ba2c0969d9aeea431f877665de9807d8300..d0688dc54d7e8d37d5f5bfda7d499114fd4395b1 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FieldExprent.java
@@ -58,8 +58,7 @@ public class FieldExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     if (instance != null) {
       lst.add(instance);
     }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java
index 6bdd8dbe64e8fc562952e63f424b562d9bbc17b0..c36b5a51fded0b60251a8d48a80f87904dadad6e 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/FunctionExprent.java
@@ -394,8 +394,9 @@ public class FunctionExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    return new ArrayList<>(lstOperands);
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
+    lst.addAll(this.lstOperands);
+    return lst;
   }
 
   @Override
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/IfExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/IfExprent.java
index 32dd0ba62d28eb445ccae63f8d688b6a3d41404f..0e129b8fe7a197b065e08e5534f726b81fd5e56f 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/IfExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/IfExprent.java
@@ -95,8 +95,7 @@ public class IfExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     lst.add(condition);
     return lst;
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
index cc41f07407ba9c258b7e83a65b2129188383c2d4..b01f7e85d4d7bdf52dba569db1d33e643efcbd1a 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/InvocationExprent.java
@@ -180,8 +180,7 @@ public class InvocationExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     if (instance != null) {
       lst.add(instance);
     }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/MonitorExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/MonitorExprent.java
index 4172874fff5ab1323bb477bbf3cdd5710a197945..72d52b0748f321d7c2227ca2b7c2f945f3092ecb 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/MonitorExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/MonitorExprent.java
@@ -33,8 +33,7 @@ public class MonitorExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     lst.add(value);
     return lst;
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
index 9be50d5282f30658f8d8de8fcecdd23974c3cfdc..52dbc41e4201d01ac324c2f99968a94d6fea5a08 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/NewExprent.java
@@ -97,9 +97,7 @@ public class NewExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
-
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     if (newType.arrayDim != 0) {
       lst.addAll(lstDims);
       lst.addAll(lstArrayElements);
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/SwitchExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/SwitchExprent.java
index 3a97175bf6ff44f745e9d4738a34aae2b4d05437..17f03c7cadf83105ed142d8000b8e73e1d9550a5 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/SwitchExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/SwitchExprent.java
@@ -67,8 +67,7 @@ public class SwitchExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    List<Exprent> lst = new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
     lst.add(value);
     return lst;
   }
diff --git a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
index 38c635a74a58a2bb5dd7d8d0ac87be25b20a00b0..e558fe2ed04ec6a51084b1242123410465feb1c3 100644
--- a/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
+++ b/src/org/jetbrains/java/decompiler/modules/decompiler/exps/VarExprent.java
@@ -65,8 +65,8 @@ public class VarExprent extends Exprent {
   }
 
   @Override
-  public List<Exprent> getAllExprents() {
-    return new ArrayList<>();
+  public List<Exprent> getAllExprents(List<Exprent> lst) {
+    return lst;
   }
 
   @Override
